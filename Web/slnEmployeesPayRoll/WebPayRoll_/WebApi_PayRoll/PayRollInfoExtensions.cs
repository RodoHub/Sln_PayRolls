// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WebPayRoll_
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for PayRollInfo.
    /// </summary>
    public static partial class PayRollInfoExtensions
    {
            /// <summary>
            /// Adds a PayRollInfo for an employee within Employee PayRoll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payRollInfo'>
            /// PayRollInfo to add to current Employee
            /// </param>
            public static Responser Post(this IPayRollInfo operations, AMPayRollInfo payRollInfo)
            {
                return Task.Factory.StartNew(s => ((IPayRollInfo)s).PostAsync(payRollInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a PayRollInfo for an employee within Employee PayRoll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payRollInfo'>
            /// PayRollInfo to add to current Employee
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Responser> PostAsync(this IPayRollInfo operations, AMPayRollInfo payRollInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(payRollInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a PayRollInfo for an employee within Employee PayRoll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payRollInfo'>
            /// PayRollInfo to add to current Employee
            /// </param>
            public static Responser Put(this IPayRollInfo operations, AMPayRollInfo payRollInfo)
            {
                return Task.Factory.StartNew(s => ((IPayRollInfo)s).PutAsync(payRollInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a PayRollInfo for an employee within Employee PayRoll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payRollInfo'>
            /// PayRollInfo to add to current Employee
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Responser> PutAsync(this IPayRollInfo operations, AMPayRollInfo payRollInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(payRollInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a PayRollInfo for an employee within Employee PayRoll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payRollInfo'>
            /// PayRollInfo to add to current Employee
            /// </param>
            public static Responser Delete(this IPayRollInfo operations, AMPayRollInfo payRollInfo)
            {
                return Task.Factory.StartNew(s => ((IPayRollInfo)s).DeleteAsync(payRollInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a PayRollInfo for an employee within Employee PayRoll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payRollInfo'>
            /// PayRollInfo to add to current Employee
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Responser> DeleteAsync(this IPayRollInfo operations, AMPayRollInfo payRollInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(payRollInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generate Token Auth
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static Responser CreateTokenAuth(this IPayRollInfo operations, string userId = default(string))
            {
                return Task.Factory.StartNew(s => ((IPayRollInfo)s).CreateTokenAuthAsync(userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate Token Auth
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Responser> CreateTokenAuthAsync(this IPayRollInfo operations, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTokenAuthWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generate Token Auth
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static Responser DisableTokenAuth(this IPayRollInfo operations, string userId = default(string))
            {
                return Task.Factory.StartNew(s => ((IPayRollInfo)s).DisableTokenAuthAsync(userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate Token Auth
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Responser> DisableTokenAuthAsync(this IPayRollInfo operations, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DisableTokenAuthWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validates Login a User authorization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// ID
            /// </param>
            public static Responser ValidateAuthorization(this IPayRollInfo operations, string token = default(string))
            {
                return Task.Factory.StartNew(s => ((IPayRollInfo)s).ValidateAuthorizationAsync(token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates Login a User authorization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Responser> ValidateAuthorizationAsync(this IPayRollInfo operations, string token = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateAuthorizationWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
